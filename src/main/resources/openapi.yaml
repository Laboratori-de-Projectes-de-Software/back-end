openapi: 3.0.3
info:
  title: Service-Client
  description: Communication between service and client.
  version: 1.0.0

paths:
  /users/login:
    post:
      summary: User login
      description: Authenticates a user and returns a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for authentication
        '400':
          description: Invalid username or password
        '404':
          description: User not found
      security:
        - api_key: []

  /users/register:
    post:
      summary: User registration
      description: Registers a new user with email validation and password security requirements.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Invalid input data
        '409':
          description: Username or email already exists

  /users/{id}:
    get:
      summary: Get user details by ID
      description: Retrieves a user by ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - api_key: []  # Se requiere autenticación con JWT
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Delete user by ID
      description: Deletes a user by ID (admin only).
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - api_key: []  # Se requiere autenticación con JWT
      responses:
        '204':
          description: User deleted successfully
        '401':
          description: Unauthorized - Invalid or missing token
        '404':
          description: User not found


components:
  securitySchemes:
    api_key:
      type: apiKey
      in: header
      name: Authorization
      description: 'Enter JWT token with Bearer prefix, e.g., "Bearer {token}"'
  schemas:
    UserLogin:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: 'user123'
        password:
          type: string
          format: password
          example: 'securePassword123'

    UserRegister:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          example: 'newuser123'
        email:
          type: string
          format: email
          pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
          example: 'user@example.com'
        password:
          type: string
          format: password
          pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).+$"
          example: 'StrongPass123'
    User:
      type: object
      properties:
        username:
          type: string
          example: 'newuser123'
        email:
          type: string
          format: email
          example: 'user@example.com'