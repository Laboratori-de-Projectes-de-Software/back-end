openapi: 3.0.0
info:
  title: Gironeta Server API
  version: 1.0.0
paths:
  /api/v0/auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserDto'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        '400':
          description: Bad request
        '409':
          description: Conflict
  /api/v0/auth/login:
    post:
      summary: Authenticate a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserDto'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Unauthorized
  /api/v0/bot:
    post:
      summary: Create a new bot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BotDto'
      responses:
        '201':
          description: Bot created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BotDto'
        '400':
          description: Bad request
        '409':
          description: Conflict
    get:
      summary: Get all bots
      parameters:
        - in: query
          name: owner
          schema:
            type: integer
          description: User ID of the bot owner
      responses:
        '200':
          description: List of bots
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BotSummaryDto'
        '404':
          description: Not found
  /api/v0/bot/{botId}:
    get:
      summary: Get a bot by ID
      parameters:
        - in: path
          name: botId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Bot details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BotDto'
        '404':
          description: Not found
    put:
      summary: Update a bot by ID
      parameters:
        - in: path
          name: botId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BotDto'
      responses:
        '204':
          description: Bot updated successfully
        '400':
          description: Bad request
        '404':
          description: Not found
  /api/v0/league:
    post:
      summary: Create a new league
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeagueDto'
      responses:
        '201':
          description: League created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeagueResponseDto'
        '400':
          description: Bad request
        '409':
          description: Conflict
    get:
      summary: Get all leagues
      parameters:
        - in: query
          name: owner
          schema:
            type: integer
          description: User ID of the league owner
      responses:
        '200':
          description: List of leagues
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LeagueResponseDto'
        '404':
          description: Not found
  /api/v0/league/{id}:
    get:
      summary: Get a league by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: League details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeagueResponseDto'
        '404':
          description: Not found
    put:
      summary: Update a league by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeagueDto'
      responses:
        '200':
          description: League updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeagueResponseDto'
        '400':
          description: Bad request
        '404':
          description: Not found
  /api/v0/league/{id}/bot:
    post:
      summary: Register a bot to a league
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                botId:
                  type: integer
      responses:
        '201':
          description: Bot registered successfully
        '400':
          description: Bad request
        '404':
          description: Not found
  /api/v0/league/{leagueId}:
    delete:
      summary: Delete a league by ID
      parameters:
        - in: path
          name: leagueId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: League deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeagueResponseDto'
        '404':
          description: Not found
components:
  schemas:
    RegisterUserDto:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
    LoginUserDto:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    UserEntity:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        password:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    LoginResponse:
      type: object
      properties:
        token:
          type: string
        type:
          type: string
        expiresIn:
          type: integer
    BotDto:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        descripcion:
          type: string
        urlImagen:
          type: string
        endpoint:
          type: string
        usuario_id:
          type: integer
    BotSummaryDto:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        urlImagen:
          type: string
        usuario_id:
          type: integer
    LeagueDto:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        urlImagen:
          type: string
        rounds:
          type: integer
        matchTime:
          type: integer
        bots:
          type: array
          items:
            type: integer
        user:
          type: string
    LeagueResponseDto:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        urlImagen:
          type: string
        rounds:
          type: integer
        matchTime:
          type: integer
        bots:
          type: array
          items:
            type: integer
        state:
          type: string
        userId:
          type: integer
    ErrorResponseDto:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        timestamp:
          type: string
          format: date-time